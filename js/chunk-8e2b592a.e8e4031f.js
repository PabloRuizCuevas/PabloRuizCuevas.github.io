(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-8e2b592a"],{"8e49":function(e,t,a){"use strict";a("ee9d")},cf1e:function(e,t,a){"use strict";a.r(t);var i=a("7a23"),n=Object(i["P"])("data-v-0dd4334e");Object(i["w"])("data-v-0dd4334e");var o={class:"page"},r={class:"article"},s=Object(i["i"])("h1",null," Monte Carlo Reduction Factor",-1),c=Object(i["i"])("div",{class:"image_container"},[Object(i["i"])("img",{alt:"Figure",src:"/images/Mc.png"}),Object(i["i"])("figcaption",null," MC simulations with different number of iterations vs the real analytic value, The shape chosen for this simulation it was a cylinder.")],-1),l=Object(i["i"])("p",null," The error of MC decays with the square root of the random points used, but as the reduction factor is often zero, the relative error is not a good measure of the precision of this method, in any case for most applications we have estimated that 1e5 are enough iterations to have a reasonably good convergence. Finally we can calculate the reduction factor for different shapes and compare it with the theory ",-1),h=Object(i["i"])("div",{class:"image_container"},[Object(i["i"])("img",{alt:"Figure",src:"/images/RF_shapes.png"}),Object(i["i"])("figcaption",null," Reduction factor for different shapes and comparation with theory. ")],-1);Object(i["u"])();var d=n((function(e,t,a,n,d,u){return Object(i["t"])(),Object(i["e"])("div",o,[Object(i["i"])("main",null,[Object(i["i"])("div",r,[s,Object(i["i"])("p",null," A Monte Carlo "+Object(i["E"])()+" appromimation can gives us a general approach to calculate the reduction factor whenever no analytical solution is possible. First of all we need to know the difference of path length given of two parallel beams with respect to the optical axis, this is already calculated in the literature  and is given by: $$\\Delta L_2= x - \\frac{x*cos({\\theta_D}) + y * sin{(\\theta_D)}}{cos{(2 \\theta - \\theta_D )}} $$ Where X and Y are the components of the vector r denoting the distance of an arbitrary scattering point to the center of the sample. These leads to a phase difference at the detector given by: $$\\Delta \\Phi_D = 2 \\pi \\frac{\\Delta L_2 }{ \\Lambda} $$ And where \\( \\Lambda \\) is the distance traveled by a neutron of velocity v over one period of the oscillating signal. So the general equation for the reduction factor will be the integral over the \\( cos(\\Delta \\psi_D) \\) over all possible neutron sample interaction points. $$ R_{sample} = \\frac{ \\int{ cos( { \\Delta\\psi_D} ) dV }}{V} $$ This integral, is has not always an analytical solution but is easy to calculate by a standard MC algorithm. First of all we will need a evenly distributed cluster of 3D random points inside our sample shape. And then we will average over all the $cos(\\Delta\\psi_D)$ of the random points. So we end up having the next equation: $$ R_{sample} = \\lim_{N\\to\\infty} \\frac{1}{N}\\sum_{ i = 0 }^{N} cos( { \\Delta\\psi_D})_i $$ The last thing we need to do is ensure that our approach gives the same result in the cases that we have an analytical formula. ",1),c,l,h])])])})),u={name:"Latexpage3",data:function(){return{latex:"$$\\frac{a}{b}$$",latex2:"$12$"}},components:{},methods:{reRender:function(){window.MathJax&&(console.log("rendering mathjax"),window.MathJax.Hub.Queue(["Typeset",window.MathJax.Hub],(function(){return console.log("done")})))}},created:function(){},mounted:function(){this.reRender()}};a("8e49");u.render=d,u.__scopeId="data-v-0dd4334e";t["default"]=u},ee9d:function(e,t,a){}}]);
//# sourceMappingURL=chunk-8e2b592a.e8e4031f.js.map